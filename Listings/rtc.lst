C51 COMPILER V9.59.0.0   RTC                                                               01/05/2024 10:04:34 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE RTC
OBJECT MODULE PLACED IN .\Objects\rtc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE rtc.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\OldDIYClock-master) DEBUG OBJEC
                    -TEXTEND PRINT(.\Listings\rtc.lst) TABS(2) OBJECT(.\Objects\rtc.obj)

line level    source

   1          #include "pinout.h"
   2          #include "sys.h"
   3          #include "rtc.h"
   4          #include "delay.h"
   5          #include "settings.h"
   6          #include "i2c.h"
   7          
   8          RTC_type rtc;
   9          
  10          static code RTC_type rtcMin = {0, 0, 0, 1, 1, 1, 0, RTC_NOEDIT,0};
  11          static code RTC_type rtcMax = {59, 59, 23, 7, 31, 12, 99, RTC_NOEDIT,99};
  12          
  13          static code uint16_t rtcMonthNumberDay[12] = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};
  14          
  15          static void rtcWeekDay(void)
  16          {
  17   1        uint8_t a, y, m;
  18   1      
  19   1        a = (rtc.month > 2 ? 0 : 1);
  20   1        y = 12 + rtc.year - a;
  21   1        m = rtc.month + 12 * a - 2;
  22   1      
  23   1        rtc.wday = (rtc.date + y + (y / 4) + ((31 * m) / 12) - 1) % 7;
  24   1      
  25   1        if (rtc.wday == 0)
  26   1          rtc.wday = 7;
  27   1      
  28   1        return;
  29   1      }
  30          
  31          uint8_t rtcDaysInMonth(void)
  32          {
  33   1        uint8_t ret = rtc.month;
  34   1      
  35   1        if (ret == 2) {
  36   2          ret = rtc.year & 0x03;
  37   2          ret = (ret ? 29 : 28);
  38   2        }
  39   1        else {
  40   2          if (ret > 7)
  41   2            ret++;
  42   2          ret |= 30;
  43   2        }
  44   1      
  45   1        return ret;
  46   1      }
  47          
  48          void rtcInit(void)
  49          {
  50   1        uint8_t wday;
  51   1      
  52   1        I2CswStart(RTC_I2C_ADDR);
  53   1        I2CswWriteByte(0x0A);
  54   1        I2CswWriteByte(0x81);
C51 COMPILER V9.59.0.0   RTC                                                               01/05/2024 10:04:34 PAGE 2   

  55   1        I2CswStop();
  56   1        I2CswStart(RTC_I2C_ADDR);
  57   1        I2CswWriteByte(0x0D);
  58   1        I2CswWriteByte(0x81);
  59   1        I2CswWriteByte(0x04);
  60   1        I2CswWriteByte(0x00);
  61   1        I2CswWriteByte(eep.timecoef);
  62   1        I2CswStop();
  63   1        
  64   1        rtcReadTime();
  65   1        wday = rtc.wday;
  66   1        rtcWeekDay();
  67   1        if(wday != rtc.wday) {
  68   2          rtcSaveDate();
  69   2        }
  70   1      
  71   1        return;
  72   1      }
  73          
  74          void rtcSaveTime(void)
  75          {
  76   1        uint8_t i;
  77   1      
  78   1        I2CswStart(RTC_I2C_ADDR);
  79   1        I2CswWriteByte(RTC_SEC);
  80   1        for (i = RTC_SEC; i <= RTC_HOUR; i++)
  81   1          I2CswWriteByte(rtcDecToBinDec(*((uint8_t*)&rtc + i)));
  82   1        I2CswStop();
  83   1      
  84   1        return;
  85   1      }
  86          
  87          void rtcSaveDate(void)
  88          {
  89   1        uint8_t i;
  90   1      
  91   1        rtcWeekDay();
  92   1      
  93   1        I2CswStart(RTC_I2C_ADDR);
  94   1        I2CswWriteByte(RTC_WDAY);
  95   1        for (i = RTC_WDAY; i <= RTC_YEAR; i++)
  96   1          I2CswWriteByte(rtcDecToBinDec(*((uint8_t*)&rtc + i)));
  97   1        I2CswStop();
  98   1      
  99   1        return;
 100   1      }
 101          
 102          void rtcSavePPM(void)
 103          {
 104   1        I2CswStart(RTC_I2C_ADDR);
 105   1        I2CswWriteByte(RTC_AGING);
 106   1        I2CswWriteByte(eep.timecoef);
 107   1        I2CswStop();
 108   1      
 109   1        return;
 110   1      }
 111          
 112          void rtcReadTime(void)
 113          {
 114   1        uint8_t i, temp;
 115   1      
 116   1        I2CswStart(RTC_I2C_ADDR);
C51 COMPILER V9.59.0.0   RTC                                                               01/05/2024 10:04:34 PAGE 3   

 117   1        I2CswWriteByte(RTC_SEC);
 118   1        I2CswStop();
 119   1        I2CswStart(RTC_I2C_ADDR | I2C_READ);
 120   1        for (i = RTC_SEC; i <= RTC_YEAR; i++) {
 121   2          temp = I2CswReadByte((i == RTC_YEAR) ? I2C_NOACK : I2C_ACK);
 122   2          *((uint8_t*)&rtc + i) = rtcBinDecToDec(temp);
 123   2        }
 124   1        I2CswStop();
 125   1        I2CswStart(RTC_I2C_ADDR);
 126   1        I2CswWriteByte(RTC_TEMP);
 127   1        I2CswStop();
 128   1        I2CswStart(RTC_I2C_ADDR | I2C_READ);
 129   1        rtc.temp = I2CswReadByte(I2C_NOACK);
 130   1        I2CswStop();
 131   1      
 132   1        return;
 133   1      }
 134          
 135          void rtcChangeTime(int8_t diff)
 136          {
 137   1        int8_t *time = (int8_t*)&rtc + rtc.etm;
 138   1        int8_t timeMax = *((int8_t*)&rtcMax + rtc.etm);
 139   1        int8_t timeMin = *((int8_t*)&rtcMin + rtc.etm);
 140   1      
 141   1        if (rtc.etm == RTC_DATE)
 142   1          timeMax = rtcDaysInMonth();
 143   1      
 144   1        *time += diff;
 145   1      
 146   1        if (*time > timeMax)
 147   1          *time = timeMin;
 148   1        if (*time < timeMin)
 149   1          *time = timeMax;
 150   1      
 151   1        return;
 152   1      }
 153          
 154          void rtcNextEditParam(void)
 155          {
 156   1        switch (rtc.etm) {
 157   2        case RTC_HOUR:
 158   2        case RTC_MIN:
 159   2          rtc.etm--;
 160   2          break;
 161   2        case RTC_SEC:
 162   2          rtc.etm = RTC_DATE;
 163   2          break;
 164   2        case RTC_DATE:
 165   2        case RTC_MONTH:
 166   2        case RTC_YEAR:
 167   2          rtc.etm--;
 168   2          break;
 169   2        default:
 170   2          rtc.etm = RTC_HOUR;
 171   2          break;
 172   2        }
 173   1      
 174   1        return;
 175   1      }
 176          
 177          uint16_t rtcYearDay(void)
 178          {
C51 COMPILER V9.59.0.0   RTC                                                               01/05/2024 10:04:34 PAGE 4   

 179   1        return rtcMonthNumberDay[rtc.month-1] + rtc.date + (((rtc.year % 4 == 0) && (rtc.month>2))? 1 : 0);
 180   1      }
 181          
 182          uint8_t rtcBinDecToDec(uint8_t num)
 183          {
 184   1        return (num >> 4) * 10 + (num & 0x0F);
 185   1      }
 186          
 187          uint8_t rtcDecToBinDec(uint8_t num)
 188          {
 189   1        return ((num / 10) << 4) + (num % 10);
 190   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    673    ----
   CONSTANT SIZE    =     42    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9      10
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
