C51 COMPILER V9.59.0.0   MAIN                                                              01/05/2024 10:04:33 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\OldDIYClock-master) DEBUG OBJE
                    -CTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "sys.h"
   2          #include "pinout.h"
   3          #include "timer.h"
   4          #include "display.h"
   5          #include "rtc.h"
   6          #include "key.h"
   7          #include "alarm.h"
   8          #include "settings.h"
   9          #include "holidays.h"
  10          #include "delay.h"
  11          #include "i2c.h"
  12          
  13          #include "bmxx80.h"
  14          #include "si7021.h"
  15          
  16          void hwInit(void)
  17          {
  18   1        settingsInit();
  19   1      
  20   1        displayInit();
  21   1      
  22   1        timerInit();
  23   1      
  24   1        rtcInit();
  25   1      
  26   1        alarmInit();
  27   1      
  28   1        bmxx80Init();
  29   1      
  30   1        si7021Init();
  31   1      
  32   1        rtc.etm = RTC_NOEDIT;
  33   1      
  34   1        return;
  35   1      }
  36          
  37          void cancelEdit(void)
  38          {
  39   1        while(refstart == 0) {}
  40   1        displayClear();
  41   1        EA = 0;
  42   1        settingsInit();
  43   1        EA = 1;
  44   1        dispMode = MODE_MAIN;
  45   1      
  46   1        return;
  47   1      }
  48          
  49          void saveEdit(void)
  50          {
  51   1        while(refstart == 0) {}
  52   1        displayClear();
  53   1        EA = 0;
  54   1        settingsSave();
C51 COMPILER V9.59.0.0   MAIN                                                              01/05/2024 10:04:33 PAGE 2   

  55   1        EA = 1;
  56   1        dispMode = MODE_MAIN;
  57   1      
  58   1        return;
  59   1      }
  60          
  61          void main(void)
  62          {
  63   1        uint8_t cmd;
  64   1        uint8_t direction = PARAM_UP;
  65   1      
  66   1        hwInit();
  67   1        startBeeper(BEEP_SHORT);
  68   1      
  69   1        sensTimer = TEMP_MEASURE_TIME;
  70   1      
  71   1        while(1) {
  72   2          while(refstart == 0) {}
  73   2          refstart = 0;
  74   2      
  75   2          if(((refcount % 10) == 0) &&(dispMode == MODE_MAIN||!(dispMode == MODE_EDIT_TIME||dispMode == MODE_EDIT_
             -DATE))) {
  76   3            if (sensTimer == 0) {
  77   4              sensTimer = SENSOR_POLL_INTERVAL;
  78   4      
  79   4              if (bmxx80HaveSensor()) bmxx80Convert();
  80   4              if (si7021SensorExists()) si7021Convert();
  81   4            }
  82   3            checkAlarm();
  83   3            checkHolidays();
  84   3          }
  85   2      
  86   2          cmd = getBtnCmd();
  87   2          if (cmd != BTN_STATE_0) {
  88   3            if (cmd < BTN_0_LONG)
  89   3              startBeeper(BEEP_SHORT);
  90   3            else
  91   3              startBeeper(BEEP_LONG);
  92   3          }
  93   2      
  94   2          /*
  95   2          BTN_0 - 'SET'
  96   2          BTN_1 -  '+'
  97   2          BTN_2 -  '-'
  98   2          */
  99   2          switch (cmd) {
 100   3            case BTN_0: {
 101   4              switch (dispMode) {
 102   5                case MODE_MAIN: { break; }
 103   5                case MODE_MENU: {
 104   6                  switch(menuNumber) {
 105   7                    case MODE_EDIT_TIME: {rtc.etm = RTC_HOUR; dispMode = menuNumber; break;}
 106   7                    case MODE_EDIT_DATE: {rtc.etm = RTC_YEAR; dispMode = menuNumber; break;}
 107   7                    case MODE_EDIT_ALARM: {alarm.etm = ALARM_ON; dispMode = menuNumber; break;}
 108   7                    case MODE_EDIT_HOURSIGNAL:
 109   7                    case MODE_EDIT_FONT:
 110   7                    case MODE_EDIT_DISP:
 111   7                    case MODE_EDIT_DOT:
 112   7                    case MODE_EDIT_BRIGHT:
 113   7                    case MODE_EDIT_TEMP_COEF:
 114   7                    case MODE_EDIT_TIME_COEF: {
 115   8                      dispMode = menuNumber;
C51 COMPILER V9.59.0.0   MAIN                                                              01/05/2024 10:04:33 PAGE 3   

 116   8                      break;
 117   8                    }
 118   7                    default:
 119   7                      break;
 120   7                  }
 121   6                  break;
 122   6                }
 123   5                case MODE_EDIT_TIME: {
 124   6                  if(rtc.etm == RTC_SEC) {
 125   7                    rtcSaveTime();
 126   7                    resetDispLoop();
 127   7                  }
 128   6                  else {
 129   7                    rtcNextEditParam();
 130   7                  }
 131   6                  break;
 132   6                }
 133   5                case MODE_EDIT_DATE: {
 134   6                  if(rtc.etm == RTC_DATE) {
 135   7                    rtcSaveDate();
 136   7                    resetDispLoop();
 137   7                  }
 138   6                  else {
 139   7                    rtcNextEditParam();
 140   7                  }
 141   6                  break;
 142   6                }
 143   5                case MODE_EDIT_ALARM: {
 144   6                  if((alarm.etm == ALARM_ON && !alarm.on)||(alarm.etm == ALARM_SUN)) {
 145   7                    alarmSave();
 146   7                    saveEdit();
 147   7                    resetDispLoop();
 148   7                  }
 149   6                  else {
 150   7                    alarmNextEditParam();
 151   7                  }
 152   6                  break;
 153   6                }
 154   5                case MODE_EDIT_TIME_COEF: {
 155   6                  rtcSavePPM();
 156   6                }
 157   5                case MODE_EDIT_HOURSIGNAL:
 158   5                case MODE_EDIT_FONT:
 159   5                case MODE_EDIT_DISP:
 160   5                case MODE_EDIT_DOT:
 161   5                case MODE_EDIT_BRIGHT:
 162   5                case MODE_EDIT_TEMP_COEF: {
 163   6                  saveEdit();
 164   6                  resetDispLoop();
 165   6                  break;
 166   6                }
 167   5              }
 168   4              break;
 169   4            }
 170   3            case BTN_1: {
 171   4              direction = PARAM_UP;
 172   4            }
 173   3            case BTN_2: {
 174   4              if (cmd == BTN_2)
 175   4                direction = PARAM_DOWN;
 176   4              switch (dispMode) {
 177   5                case MODE_MAIN: { changeBright(direction); break; }
C51 COMPILER V9.59.0.0   MAIN                                                              01/05/2024 10:04:33 PAGE 4   

 178   5                case MODE_MENU: { changeMenu(direction); break; }
 179   5                case MODE_EDIT_TIME:
 180   5                case MODE_EDIT_DATE: { rtcChangeTime(direction); break; }
 181   5                case MODE_EDIT_ALARM: { alarmChange(direction); break; }
 182   5                case MODE_EDIT_HOURSIGNAL: { changeHourSignal(direction); break; }
 183   5                case MODE_EDIT_FONT: { changeFont(direction); break; }
 184   5                case MODE_EDIT_DISP: { changeDisp(direction); break; }
 185   5                case MODE_EDIT_DOT: { changeDot(direction); break; }
 186   5                case MODE_EDIT_BRIGHT: { changeBright(direction); break; }
 187   5                case MODE_EDIT_TIME_COEF: { changeTimeCoef(direction); break; }
 188   5                case MODE_EDIT_TEMP_COEF: { changeTempCoef(direction); break; }
 189   5              }
 190   4              break;
 191   4            }
 192   3            case BTN_0_LONG: {
 193   4              switch (dispMode) {
 194   5                case MODE_MAIN: { dispMode = MODE_MENU; /*menuNumber = MODE_EDIT_TIME;*/ break; }
 195   5                case MODE_MENU: { dispMode = MODE_MAIN; break; }
 196   5                case MODE_EDIT_ALARM: {
 197   6                  alarmInit();
 198   6                }
 199   5                case MODE_EDIT_HOURSIGNAL:
 200   5                case MODE_EDIT_FONT:
 201   5                case MODE_EDIT_DISP:
 202   5                case MODE_EDIT_DOT:
 203   5                case MODE_EDIT_BRIGHT:
 204   5                case MODE_EDIT_TEMP_COEF:
 205   5                case MODE_EDIT_TIME_COEF: {
 206   6                  cancelEdit();
 207   6                }
 208   5                case MODE_EDIT_TIME:
 209   5                case MODE_EDIT_DATE: {
 210   6                  resetDispLoop();
 211   6                  break;
 212   6                }
 213   5              }
 214   4              break;
 215   4            }
 216   3            case BTN_1_LONG: {
 217   4              break;
 218   4            }
 219   3            case BTN_2_LONG: {
 220   4              break;
 221   4            }
 222   3            case BTN_0_LONG | BTN_1_LONG: {
 223   4              break;
 224   4            }
 225   3            case BTN_0_LONG | BTN_2_LONG: {
 226   4              break;
 227   4            }
 228   3            case BTN_1_LONG | BTN_2_LONG: {
 229   4              break;
 230   4            }
 231   3            case BTN_0_LONG | BTN_1_LONG | BTN_2_LONG: {
 232   4              break;
 233   4            }
 234   3          }
 235   2      
 236   2          switch(dispMode) {
 237   3            case MODE_MAIN: { showMainScreen(); break; }
 238   3            case MODE_MENU: { showMenu(); break; }
 239   3            case MODE_EDIT_TIME: { showTimeEdit(); break; } 
C51 COMPILER V9.59.0.0   MAIN                                                              01/05/2024 10:04:33 PAGE 5   

 240   3            case MODE_EDIT_DATE: { showDateEdit(); break; }
 241   3            case MODE_EDIT_ALARM: { showAlarmEdit(); break; }
 242   3            case MODE_EDIT_HOURSIGNAL: { showHourSignalEdit(); break; }
 243   3            case MODE_EDIT_FONT: { showFontEdit(); break; }
 244   3            case MODE_EDIT_DISP: { showDispEdit(); break; }
 245   3            case MODE_EDIT_DOT: { showDotEdit(); break; }
 246   3            case MODE_EDIT_BRIGHT: { showBrightEdit(); break; }
 247   3            case MODE_EDIT_TIME_COEF: { showTimeCoefEdit(); break; }
 248   3            case MODE_EDIT_TEMP_COEF: { showTempCoefEdit(); break; }
 249   3          }
 250   2      
 251   2      
 252   2      
 253   2      
 254   2      
 255   2          dotcount++;
 256   2          refcount++;
 257   2          if( holiday&&(widgetNumber == WI_HOLY) && (refcount % 5) == 0 ) {
 258   3            if(scroll_index >=0) scroll_index++;
 259   3          }
 260   2          if( dotcount > 59 ) dotcount = 0;
 261   2          if( refcount > 59 ) {
 262   3            refcount = 0;
 263   3            if( /*eep.screenMode < 4*/ 1 ) {
 264   4              screenTime++;
 265   4              switch( widgetNumber )
 266   4              {
 267   5                case WI_TIME: {if(screenTime > 5 ){ widgetNumber++; screenTime = 0;} break;}
 268   5                case WI_DATE: {if(screenTime > 2 ){ widgetNumber++; screenTime = 0;} break;}
 269   5                case WI_WEEK: {if(screenTime > 2 ){ widgetNumber++; screenTime = 0;} break;}
 270   5                case WI_TEMP: {
 271   6                  if(screenTime > 2 ){
 272   7                    if(bmxx80HaveSensor()) {
 273   8                      widgetNumber = WI_PRES;
 274   8                    }
 275   7                    else if(si7021SensorExists()) {
 276   8                        widgetNumber = WI_HUMI;
 277   8                    }
 278   7                    else if(holiday){
 279   8                      widgetNumber = WI_HOLY; scroll_index = 0;
 280   8                    }
 281   7                    else {
 282   8                      widgetNumber = WI_TIME;
 283   8                    }
 284   7                    screenTime = 0;
 285   7                  }
 286   6                  break;
 287   6                }
 288   5                case WI_PRES: {
 289   6                  if(screenTime > 2 ){
 290   7                    if(bmxx80HaveSensor()==BME280_CHIP_ID||si7021SensorExists()) {
 291   8                      widgetNumber++;
 292   8                    }
 293   7                    else if(holiday){
 294   8                      widgetNumber = WI_HOLY; scroll_index = 0;
 295   8                    }
 296   7                    else {
 297   8                      widgetNumber = WI_TIME;
 298   8                    }
 299   7                    screenTime = 0;
 300   7                  }
 301   6                  break;
C51 COMPILER V9.59.0.0   MAIN                                                              01/05/2024 10:04:33 PAGE 6   

 302   6                }
 303   5                case WI_HUMI: {
 304   6                  if(screenTime > 2 ){
 305   7                    if(holiday){
 306   8                      widgetNumber = WI_HOLY; scroll_index = 0;
 307   8                    }
 308   7                    else {
 309   8                      widgetNumber = WI_TIME;
 310   8                    }
 311   7                    screenTime = 0;
 312   7                  }
 313   6                  break;
 314   6                }
 315   5                case WI_HOLY: {if(scroll_index < 0){widgetNumber = WI_TIME; screenTime = 0;} break;}
 316   5                default: { widgetNumber = WI_TIME; screenTime = 0; break;}
 317   5              }
 318   4            }
 319   3          }
 320   2        }
 321   1        
 322   1        return;
 323   1      }
 324          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    998    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
